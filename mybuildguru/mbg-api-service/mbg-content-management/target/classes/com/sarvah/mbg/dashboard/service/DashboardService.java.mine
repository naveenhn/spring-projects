package com.sarvah.mbg.dashboard.service;

import java.sql.SQLException;
import java.util.List;

import org.springframework.data.domain.Sort;
import org.springframework.data.geo.Distance;

import com.sarvah.mbg.dashboard.response.DashBoardProjectResponsesCount;
import com.sarvah.mbg.dashboard.response.DashBoardStatusCount;
import com.sarvah.mbg.dashboard.response.DashboardBidProjectResponse;
import com.sarvah.mbg.dashboard.response.DashboardConstructionsCount;
import com.sarvah.mbg.dashboard.response.DashboardOnboardedRoleCount;
import com.sarvah.mbg.dashboard.response.DashboardOrdersCount;
import com.sarvah.mbg.dashboard.response.DashboardPostResponsesCount;
import com.sarvah.mbg.dashboard.response.DashboardProductResponse;
import com.sarvah.mbg.dashboard.response.DashboardProjectResponses;
import com.sarvah.mbg.domain.common.asset.Video;
import com.sarvah.mbg.domain.mongo.aceproject.Project;
import com.sarvah.mbg.domain.mongo.aceproject.ProjectType;
import com.sarvah.mbg.domain.mongo.catalog.Product;
import com.sarvah.mbg.domain.mongo.marketing.Banner;
import com.sarvah.mbg.domain.mongo.marketing.Promotion;

public interface DashboardService {

	/**
	 * 
	 * @param page
	 * @param size
	 * @param sort
	 * @return List<Video>
	 */
	List<Video> newlylaunched(int page, int size, Sort sort);

	/**
	 * 
	 * @param page
	 * @param size
	 * @param sort
	 * @return List<Promotion>
	 * @throws SQLException
	 */
	List<Promotion> ongoingpromotions(int page, int size, Sort sort)
			throws SQLException;

	/**
	 * 
	 * @param uid
	 * @param inMbg
	 * @param rejected
	 * @param waitingApproval
	 * @return DashBoardStatusCount
	 * @throws Exception
	 */
	DashBoardStatusCount getDashBoardProductStatus(String uid, String inMbg,
			String rejected, String waitingApproval) throws Exception;

	/**
	 * 
	 * @param uid
	 * @return DashboardOrdersCount
	 * @throws Exception
	 */
	DashboardOrdersCount getMyOrders(String uid) throws Exception;

	/**
	 * 
	 * @param size2
	 * @param page
	 * @return List<Product>
	 */
	List<Product> getNewArrivals(int size, int size2);

	/**
	 * 
	 * @param uid
	 * @return DashboardPostResponsesCount
	 * @throws Exception
	 */
	DashboardPostResponsesCount getResponseForMyPost(String uid)
			throws Exception;

	/**
	 * 
	 * @param page
	 * @param size
	 * @param uid
	 * @return DashBoardProjectResponsesCount
	 * @throws Exception
	 */
	DashBoardProjectResponsesCount getResponsesForMyBids(int page, int size,
			String uid) throws Exception;

	/**
	 * 
	 * @param page
	 * @param size
	 * @param uid
	 * @return List<DashboardProjectResponses>
	 * @throws Exception
	 */

	List<DashboardProjectResponses> getAllProjectResponses(int page, int size,
			String uid) throws Exception;

	/**
	 * 
	 * @param page
	 * @param size
	 * @param uid
	 * @return List<Project>
	 */

	List<Project> getAllProjectBids(int page, int size);

	/**
	 * 
	 * @param page
	 * @param size
	 * @param uid
	 * @param distance
	 * @param type
	 * @return List<DashboardConstructionsCount>
	 * @throws Exception
	 */
	List<DashboardConstructionsCount> getAllTypeOfConstructionsAroundMe(
			int page, int size, String uid, Distance distance, ProjectType type)
			throws Exception;

	/**
	 * 
	 * @return List<DashboardProductResponse>
	 */

	List<DashboardProductResponse> getTop5Products();

	/**
	 * 
	 * @param page
	 * @param size
	 * @param uid
	 * @return List<Promotion>
	 * @throws Exception
	 */

	List<Promotion> getMyCurrentPromotions(int page, int size, String uid)
			throws Exception;

	/**
	 * 
	 * @return List<DashboardBidProjectResponse>
	 */

	List<DashboardBidProjectResponse> getHowToBidProjectResponse();

	/**
	 * 
	 * @return DashboardBidProjectResponse
	 */

	DashboardBidProjectResponse getHowToOnBoardProduct();

	/**
	 * 
	 * @return DashboardOnboardedRoleCount
	 */

	DashboardBidProjectResponse getHowToBidVideo();

	/**
	 * 
	 * @return DashboardOnboardedRoleCount
	 */

	DashboardOnboardedRoleCount getOnboardedByRole();

	/**
	 * 
	 * @return DashboardPostResponsesCount
	 */

	DashboardPostResponsesCount getAllProjectUpdates();

	/**
	 * 
	 * @param inMbg
	 * @param rejected
	 * @param waitingApproval
	 * @return DashBoardStatusCount
	 */
	DashBoardStatusCount getAllProductsStatus(String inMbg, String rejected,
			String waitingApproval);

	/**
	 * 
	 * @param page
	 * @param size
	 * @param distance
	 * @param type
	 * @return List<DashboardConstructionsCount>
	 */

	List<DashboardConstructionsCount> getAllConstructions(int page, int size,
			Distance distance, ProjectType type);

	/**
	 * 
	 * @return List<DashboardBidProjectResponse>
	 */
	List<DashboardBidProjectResponse> launchWebSite();

	/**
	 * 
	 * @param uid
	 * @return List<Banner>
	 * @throws Exception
	 */

	List<Banner> getMyCurrentBanners(String uid) throws Exception;

	/**
	 * 
	 * @return List<Banner>
	 */

	List<Banner> getAllCurrentBanners();

	/**
	 * 
	 * @param uid
	 * @return DashboardOrdersCount
	 * @throws Exception
	 */
	DashboardOrdersCount getDealerOrders(String uid) throws Exception;

	/**
	 * 
	 * @return List<Product>
	 */
	List<Product> mostViewed();

	/**
	 * 
	 * @param brand
	 * @return List<Product>
	 */

	List<Product> mostViewedByBrand(String brand);

	

}
